<script>
	import Searchbox from './../search/Searchbox.svelte';
    import { version } from "../../../scripts/version.js";
    import { onMount } from 'svelte';
    import * as d3 from 'd3';
    import { scaleLinear, scaleOrdinal } from 'd3-scale';
    import { csvParse } from 'd3-dsv';

    let data = [];
    let voteSummary = { data: {}, startPositions: {}};
    let totalVotes = 0;
    let barChartElement;
    let chartWidth;
    let searchQuery = '';

    let width = 960,
    height = 500;

    $: {
        if (barChartElement) {
            chartWidth = barChartElement.clientWidth;
            xScale.range([0, chartWidth]);
        }
    }

    const xScale = d3.scaleLinear().domain([0, 1]).range([0, chartWidth]);

    export let value;

    function updateVoteSummary() {
        const categoriesOrder = ['A favor', 'A favor com ressalvas', 'Não foi encontrado', 'Não quis responder', 'Contra'];
        voteSummary = {
            data: data.reduce((acc, row) => {
                const vote = row['intenção de voto'];
                if (!acc[vote]) {
                    acc[vote] = 0;
                }
                acc[vote]++;
                return acc;
            }, {}),
            startPositions: {},
        };

        totalVotes = Object.values(voteSummary.data).reduce((a, b) => a + b, 0);

        let startPos = 0;
        categoriesOrder.forEach((category) => {
        voteSummary.startPositions[category] = startPos;
        startPos += xScale(voteSummary.data[category] / totalVotes);
    });
    }

    async function loadCSV() {
        const response = await fetch(
            `https://arte.estadao.com.br/public/pages/14XHj2YvAu7OYvJLDSSTi2P48A7J2Sf6jk3GW5qu0Mm8/placar_camara.csv?v=${version()}`
        );
        const csvText = await response.text();
        data = csvParse(csvText, d3.autoType);
        updateVoteSummary();
        processData(data);
    }

    onMount(loadCSV);

    function handleSearch(event) {
  searchQuery = event.target.value.toLowerCase();
}
$: filteredData = data.filter((row) => {
        return row.nome.toLowerCase().includes(searchQuery.toLowerCase());
    });

//     function processData(data) {
//   const aggregatedData = d3.rollup(
//     data,
//     (v) => d3.sum(v, (d) => d['intenção de voto']),
//     (d) => d.estado
//   );

//   data = Array.from(aggregatedData, ([state, votes]) => ({ state, votes }));

//   createBubbleChart(data);
// }

// function createBubbleChart(data) {
//   const svg = d3
//     .select("#chart")
//     .append("svg")
//     .attr("width", width)
//     .attr("height", height);

//   const pack = (data) =>
//     d3.pack().size([width, height]).padding(1.5)(
//       d3
//         .hierarchy({ children: data })
//         .sum((d) => d.votes)
//     );

//   const root = pack(data);

//   const color = d3.scaleOrdinal(data.map((d) => d.state), d3.schemeCategory10);

//   const node = svg
//     .selectAll("g")
//     .data(root.leaves())
//     .join("g")
//     .attr("transform", (d) => `translate(${d.x},${d.y})`);

//   node
//     .append("circle")
//     .attr("r", (d) => d.r)
//     .attr("fill-opacity", 0.7)
//     .attr("fill", (d) => color(d.data.state));

//   node
//     .append("text")
//     .attr("text-anchor", "middle")
//     .attr("alignment-baseline", "middle")
//     .text((d) => d.data.state)
//     .attr("font-size", (d) => Math.min(2 * d.r, (2 * d.r - 8) / 2) + "px");
// }



</script>

<div bind:this={barChartElement} class="bar-chart-wrapper M">
    <div class="bar-chart">
        {#each Object.entries(voteSummary.data) as [vote, count], index}
            <div
                class="bar {
                    vote === 'A favor' ? 'afavor' : 
                    vote === 'A favor com ressalvas' ? 'afavor-com-ressalvas' : 
                    vote === 'Não foi encontrado' ? 'nao-foi-encontrado' : 
                    vote === 'Não quis responder' ? 'nao-quis-responder' :
                    vote === 'Contra' ? 'contra' :  
                    ''
                    }"
                style=
                "width: {xScale(count / totalVotes)}px; 
                left: {voteSummary.startPositions[vote]}px;"
            >
            <div 
                class="label {
                    vote === 'A favor' ? 'afavor' : 
                    vote === 'A favor com ressalvas' ? 'afavor-com-ressalvas' : 
                    vote === 'Não foi encontrado' ? 'nao-foi-encontrado' : 
                    vote === 'Não quis responder' ? 'nao-quis-responder' :
                    vote === 'Contra' ? 'contra' :  
                    ''
                }"
            >
            <div 
                class="count {
                    vote === 'A favor' ? 'count-large' : 
                    vote === 'Contra' ? 'count-large' : 
                    ''
                }"
            >
                {vote === 'A favor' ? count + voteSummary.data['A favor com ressalvas'] : count}
            </div>
                <div class="vote">{vote}</div>
            </div>
            </div>
        {/each}
    </div>
</div>

<div id="chart" class='bubble-chart M'></div>


<Searchbox placeholder="Buscar por nome..." on:input={handleSearch}/>

<div class='P'>
    <!-- <input id="search-input" type="text" bind:value={searchQuery} on:input={handleSearch}> -->
    <table>
        <!-- <thead>
            <tr>
                <th></th>
                <th></th>
                <th></th>
                <th>Partido</th>
                <th>Estado</th>
                <th>Contato</th>
            </tr>
        </thead> -->
        <tbody>
            {#each filteredData as row}
            <tr>
                <td>
                    <div class="circle">
                    <img class="grayscale" src="https://arte.estadao.com.br/politica/2023/camara/img/{row.id}.jpg" alt="{row.nome}" width="36" height="auto">
                    <div class="circle-overlay {
                        row['intenção de voto'] === 'A favor' ? 'afavor' : 
                        row['intenção de voto'] === 'A favor com ressalvas' ? 'afavor-com-ressalvas' : 
                        row['intenção de voto'] === 'Não foi encontrado' ? 'nao-foi-encontrado' : 
                        row['intenção de voto'] === 'Não quis responder' ? 'nao-quis-responder' :
                        row['intenção de voto'] === 'Contra' ? 'contra' :  
                        ''
                    }
                    "></div>
                </div>
                </td>
                <td class='voto'>
                    {#if row['intenção de voto'] === 'A favor'}
                        <svg width="20" height="20">
                            <polygon xmlns="http://www.w3.org/2000/svg" fill="#007367" points="7,16.8 0.6,10.4 3.4,7.6 7,11.2 15.6,2.6 18.4,5.4  "/>
                        </svg>
                    {:else if row['intenção de voto'] === 'A favor com ressalvas'}
                        <svg width="20" height="20">
                            <rect x="0" y="0" width="20" height="20" fill="#007367"></rect>
                            <path d="M3,3 L17,17 M3,17 L17,3" stroke="white" stroke-width="3"></path>
                        </svg>
                    {:else if row['intenção de voto'] === 'Não foi encontrado'}
                        <svg width="20" height="20">
                            <rect x="0" y="0" width="20" height="20" fill="#d5d5d5"></rect>
                        </svg>
                    {:else if row['intenção de voto'] === 'Não quis responder'}
                        <svg width="20" height="20">
                            <rect x="0" y="0" width="20" height="20" fill="#838383"></rect>
                        </svg>
                    {:else if row['intenção de voto'] === 'Contra'}
                        <svg width="20" height="20">
                            <polygon xmlns="http://www.w3.org/2000/svg" fill="#c20736" points="17.4,4.4 14.6,1.6 9.5,6.7 4.4,1.6 1.6,4.4 6.7,9.5 1.6,14.6 4.4,17.4 9.5,12.3 14.6,17.4   17.4,14.6 12.3,9.5 "/>
                        </svg>
                    {/if}
                </td>
                <td class='nome'>{row.nome}</td>
                <td class='partido'>{row.partido}</td>
                <td class='estado'>{row.estado}</td>
                <td class='mail'>
                    <a href="mailto:{row.email}" target="_blank">
                        <svg viewBox="0 0 15 9" class="css-uz6jad" width="18" height="12"><path fill-rule="evenodd" clip-rule="evenodd" d="M.906 8.418V0L5.64 4.76.906 8.419zm13 0L9.174 4.761 13.906 0v8.418zM7.407 6.539l-1.13-1.137L.907 9h13l-5.37-3.598-1.13 1.137zM1.297 0h12.22l-6.11 5.095L1.297 0z" fill="#000"></path></svg>
                    </a>
            </tr>
        {/each}
        </tbody>
    </table>
</div>

<style>
    .circle-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: #f5f5f5;
        mix-blend-mode: multiply;
    }
    .circle {
        position: relative;
        border-radius: 50%;
        overflow: hidden;
        width: 60px;
        height: 60px;
    }
    .circle img {
        display: inline;
        margin: 0 auto;
        height: 110%;
        width: auto;
        transform: translate(5px, 3px);
    }
    .grayscale {
        filter: grayscale(100%);
    }

    table {
        border-collapse: collapse;
        font-family: var(--sans-serif);
        font-size: calc(var(--corpo-mobile) * 0.8);
        width: 100%;
    }

    /* th {
        background-color: var(--cor-fundo);
        text-transform: uppercase;
        font-size: calc(var(--corpo-mobile) * 0.5);
    } */

    td {
        border: none;
        border-bottom: 1px solid #ccc;
        padding: 8px;
        text-align: left;
    }

    .nome {
        font-weight: 600;
        width: 50%;
    }

    .partido, .estado, .voto {
        font-size: calc(var(--corpo-mobile) * 0.6);
    }

    .voto {
        width: 10%;
    }

    .partido {
        width: 20%;
    }

    .estado, .mail {
        text-align: right;
    }

    .mail {
        width: 10%;
    }

    .bar-chart-wrapper {
        margin: calc(var(--margem-vertical) * 2) auto calc(var(--margem-vertical) * 1) auto;
        width: 100%;
        height: 100px;
        overflow: hidden;
    }

    .bar-chart {
        position: relative;
        white-space: nowrap;
    }

    .bar {
        position: absolute;
        left: 0;
    }

    .label {
        color: black;
        font-size: 14px;
        line-height: 16px;
        font-family: var(--condensed);
        font-weight: 600;
        transform: translateY(50px);
    }

    .count {
        font-size: 20px;
        margin-bottom: 12px;
    }

    .count-large {
        font-size: 45px;
        margin-bottom: 14px;
    }
    
    .vote {
        text-transform: uppercase;
        letter-spacing: 0.03rem;
    }

    .bar.afavor {
        background-color:#007367;
        height: 25px;
        border-top-left-radius: 4px;
        border-bottom-left-radius: 4px;
    }

    .label.afavor {
        color: #007367;
    }

    .circle-overlay.afavor, .circle-overlay.afavor-com-ressalvas {
        background-color: #007367;
        opacity: 0.1;
    }

    .bar.afavor-com-ressalvas {
        background-color:#007367;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8' viewBox='0 0 10 10'%3E%3Cpath d='M-1,1 l2,-2 M0,10 l10,-10 M9,11 l2,-2' stroke='white' stroke-width='3' stroke-linecap='square'/%3E%3C/svg%3E");
        height: 25px;
    }

    .label.afavor-com-ressalvas {
        color: #007367;
        word-break: break-word;
    }

    .bar.nao-foi-encontrado {
        background-color:#d5d5d5;
        height: 25px;
    }

    .bar.nao-quis-responder {
        background-color:#838383;
        height: 25px;
    }

    .bar.contra {
        background-color:#c20736;
        height: 25px;
        border-top-right-radius: 4px;
        border-bottom-right-radius: 4px;
    }

    .label.contra{
        color: #c20736;
        text-align: right;
    }

    .circle-overlay.contra {
        background-color: #c20736;
        opacity: 0.1;
    }

</style>